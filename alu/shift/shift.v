/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */

module Mux_4x1
(
    input [1:0] sel,
    input in_0,
    input in_1,
    input in_2,
    input in_3,
    output reg out
);
    always @ (*) begin
        case (sel)
            2'h0: out = in_0;
            2'h1: out = in_1;
            2'h2: out = in_2;
            2'h3: out = in_3;
            default:
                out = 'h0;
        endcase
    end
endmodule


module DriverInv
(
    input in,
    input sel,
    output out
);
    assign out = (sel == 1'b0)? in : 1'bz;
endmodule

// dual tri state 4-line to 1-line data selectors/multiplexers
module \74253  (
  input A,
  input B,
  input \2G ,
  input \2C0 ,
  input \2C1 ,
  input \2C2 ,
  input \2C3 ,
  input \1G ,
  input \1C0 ,
  input \1C1 ,
  input \1C2 ,
  input \1C3 ,
  input VCC,
  input GND,
  output \2Y ,
  output \1Y 
);
  wire [1:0] s0;
  wire s1;
  wire s2;
  assign s0[0] = A;
  assign s0[1] = B;
  Mux_4x1 Mux_4x1_i0 (
    .sel( s0 ),
    .in_0( \2C0  ),
    .in_1( \2C1  ),
    .in_2( \2C2  ),
    .in_3( \2C3  ),
    .out( s1 )
  );
  Mux_4x1 Mux_4x1_i1 (
    .sel( s0 ),
    .in_0( \1C0  ),
    .in_1( \1C1  ),
    .in_2( \1C2  ),
    .in_3( \1C3  ),
    .out( s2 )
  );
  DriverInv DriverInv_i2 (
    .in( s2 ),
    .sel( \1G  ),
    .out( \1Y  )
  );
  DriverInv DriverInv_i3 (
    .in( s1 ),
    .sel( \2G  ),
    .out( \2Y  )
  );
endmodule

module shift (
  input SelectA,
  input SelectB,
  input [7:0] LHSIn,
  input CarryIn,
  output CarryOut,
  output [7:0] LHSOut
);
  wire LHSIn1;
  wire LHSIn0;
  wire LHSOut0;
  wire LHSOut1;
  wire LHSIn2;
  wire LHSIn3;
  wire LHSIn4;
  wire LHSIn5;
  wire LHSIn6;
  wire LHSIn7;
  wire LHSOut2;
  wire LHSOut3;
  wire LHSOut4;
  wire LHSOut5;
  wire LHSOut6;
  wire LHSOut7;
  assign LHSIn0 = LHSIn[0];
  assign LHSIn1 = LHSIn[1];
  assign LHSIn2 = LHSIn[2];
  assign LHSIn3 = LHSIn[3];
  assign LHSIn4 = LHSIn[4];
  assign LHSIn5 = LHSIn[5];
  assign LHSIn6 = LHSIn[6];
  assign LHSIn7 = LHSIn[7];
  \74253  \74253_i0 (
    .\1G ( 1'b0 ),
    .B( SelectB ),
    .\1C3 ( 1'b0 ),
    .\1C2 ( LHSIn1 ),
    .\1C1 ( CarryIn ),
    .\1C0 ( LHSIn0 ),
    .GND( 1'b0 ),
    .\2C0 ( LHSIn1 ),
    .\2C1 ( LHSIn0 ),
    .\2C2 ( LHSIn2 ),
    .\2C3 ( 1'b0 ),
    .A( SelectA ),
    .\2G ( 1'b0 ),
    .VCC( 1'b1 ),
    .\1Y ( LHSOut0 ),
    .\2Y ( LHSOut1 )
  );
  \74253  \74253_i1 (
    .\1G ( 1'b0 ),
    .B( SelectB ),
    .\1C3 ( 1'b0 ),
    .\1C2 ( LHSIn3 ),
    .\1C1 ( LHSIn1 ),
    .\1C0 ( LHSIn2 ),
    .GND( 1'b0 ),
    .\2C0 ( LHSIn3 ),
    .\2C1 ( LHSIn2 ),
    .\2C2 ( LHSIn4 ),
    .\2C3 ( 1'b0 ),
    .A( SelectA ),
    .\2G ( 1'b0 ),
    .VCC( 1'b1 ),
    .\1Y ( LHSOut2 ),
    .\2Y ( LHSOut3 )
  );
  \74253  \74253_i2 (
    .\1G ( 1'b0 ),
    .B( SelectB ),
    .\1C3 ( 1'b0 ),
    .\1C2 ( LHSIn5 ),
    .\1C1 ( LHSIn3 ),
    .\1C0 ( LHSIn4 ),
    .GND( 1'b0 ),
    .\2C0 ( LHSIn5 ),
    .\2C1 ( LHSIn4 ),
    .\2C2 ( LHSIn6 ),
    .\2C3 ( 1'b0 ),
    .A( SelectA ),
    .\2G ( 1'b0 ),
    .VCC( 1'b1 ),
    .\1Y ( LHSOut4 ),
    .\2Y ( LHSOut5 )
  );
  \74253  \74253_i3 (
    .\1G ( 1'b0 ),
    .B( SelectB ),
    .\1C3 ( 1'b0 ),
    .\1C2 ( LHSIn7 ),
    .\1C1 ( LHSIn5 ),
    .\1C0 ( LHSIn6 ),
    .GND( 1'b0 ),
    .\2C0 ( LHSIn7 ),
    .\2C1 ( LHSIn6 ),
    .\2C2 ( CarryIn ),
    .\2C3 ( 1'b0 ),
    .A( SelectA ),
    .\2G ( 1'b0 ),
    .VCC( 1'b1 ),
    .\1Y ( LHSOut6 ),
    .\2Y ( LHSOut7 )
  );
  \74253  \74253_i4 (
    .\1G ( 1'b0 ),
    .B( SelectB ),
    .\1C3 ( 1'b0 ),
    .\1C2 ( LHSIn0 ),
    .\1C1 ( LHSIn7 ),
    .\1C0 ( CarryIn ),
    .GND( 1'b0 ),
    .\2C0 ( 1'b0 ),
    .\2C1 ( 1'b0 ),
    .\2C2 ( 1'b0 ),
    .\2C3 ( 1'b0 ),
    .A( SelectA ),
    .\2G ( 1'b0 ),
    .VCC( 1'b1 ),
    .\1Y ( CarryOut )
  );
  assign LHSOut[0] = LHSOut0;
  assign LHSOut[1] = LHSOut1;
  assign LHSOut[2] = LHSOut2;
  assign LHSOut[3] = LHSOut3;
  assign LHSOut[4] = LHSOut4;
  assign LHSOut[5] = LHSOut5;
  assign LHSOut[6] = LHSOut6;
  assign LHSOut[7] = LHSOut7;
endmodule
